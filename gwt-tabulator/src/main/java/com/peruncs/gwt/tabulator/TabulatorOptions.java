package com.peruncs.gwt.tabulator;

import com.peruncs.gwt.utils.Callback;
import com.peruncs.gwt.utils.Callback1;
import com.peruncs.gwt.utils.Callback2;
import com.peruncs.gwt.utils.CallbackRet1;
import jsinterop.annotations.JsType;


/**
 * Tabulator options.
 */
@JsType
public class TabulatorOptions {

    //Layout
    public final static String LAYOUT_FITDATA = "fitData"; //default
    public final static String LAYOUT_FITDATA_FILL = "fitDataFill";
    public final static String LAYOUT_FITCOLUMNS = "fitColumns";
    public String layout;

    /**
     * If you set the autoColumns option to true, every time data is loaded into the table through the data option or through the setData function, Tabulator will examine the first row of the data and build columns to match that data.
     */
    public boolean autoColumns;


    //Responsive layout
    public final static String RESPONSIVE_LAYOUT_HIDE = "hide";
    public final static String RESPONSIVE_LAYOUT_COLLAPSE = "collapse";
    //Formatter
    public final static String FORMATTER_RESPONSIVE_COLLAPSE = "responsiveCollapse";

    public boolean layoutColumnsOnNewData;
    public StringOrBoolean responsiveLayout;
    public CallbackRet1<String, ColumnTitleValue[]> responsiveLayoutCollapseFormatter;
    public boolean responsiveLayoutCollapseUseFormatters;
    public boolean responsiveLayoutCollapseStartOpen;
    public String formatter;

    //Resizable Elements
    boolean autoResize;
    boolean resizableRows;
    public final static String RESIZABLE_COLUMNS_HEADER = "header";
    public final static String RESIZABLE_COLUMNS_CELL = "cell";
    public StringOrBoolean resizableColumns;
    public boolean resizable;
    public int columnMinWidth = 40;

    /**
     * You can use the placeholder option to display a message to your users when the table has no data set. The function can either take a string to display or, the HTML or DOM Node to display in the empty table
     */
    public StringOrNode placeholder;

    /**
     * The footer element that the tables uses for holding pagination elements etc, is automatically generated by Tabulator.
     * If you want to use your own element for any reason, for example you want to add additional elements to the footer, you can use the footerElement option to pass either a CSS selector, a DOM node, or the HTML for the contents of footer element into the table.
     */
    public StringOrNode footerElement;

    //Virtual DOM
    public StringOrInteger height;
    public Boolean virtualDom;
    public int virtualDomBuffer;


    public ColumnOptions[] columns;

    public boolean sortOrderReverse;

    /**
     * By default you can sort by multiple columns at the same time by holding the ctrl or shift key when you click on the column headers.
     * if you wish to disable this behaviour, so only once column can be sorted at a time, you can set the columnHeaderSortMulti option to false
     */
    public boolean columnHeaderSortMulti;

    /**
     * When the table is first created it can be defined with an initial set of sorters. These can be set using the initialSort option. This will take the same sorter array as the setSort function.
     */
    public SortOrder[] initialSort;

    /**
     * Send sort data to the server instead of processing locally.
     */
    public boolean ajaxSorting;

    /**
     * The dataSorting callback is triggered whenever a sort event occurs, before sorting happens.
     */
    public Callback1<Sorter[]> dataSorting;


    /**
     * The dataSorted callback is triggered after the table dataset is sorted.
     */
    public Callback2<Sorter[], RowComponent[]> dataSorted;


    /**
     * Tabulator also allows you to define a row level formatter using the rowFormatter option. this lets you alter each row of the table based on the data it contains.
     * The function accepts one argument, the RowComponent for the row being formatted.
     * The example below changes the background colour of a row to blue if the col value for that row is "blue".
     */

    public Callback1<RowComponent> rowFormatter;


    public TooltipUnion tooltips;

    /**
     * By default Tabulator regenerates tooltips whenever data in a cell changes, however if you use a tooltip generation function that is dependant on values outside the cell this may mean the tooltip does not update as expected.
     * To get round this, you can use the tooltipGenerationMode parameter to make tooltips regenerate whenever the users mouse enters the cell. The parameter can have one of two values
     * load - Generate tooltip when value is loaded into cell (default behaviour)
     * hover - Generate tooltip when users mouse enters the cell
     */
    public String tooltipGenerationMode;

    /** Enable header tooltips*/
    public HeaderTooltipUnion tooltipsHeader;
}



